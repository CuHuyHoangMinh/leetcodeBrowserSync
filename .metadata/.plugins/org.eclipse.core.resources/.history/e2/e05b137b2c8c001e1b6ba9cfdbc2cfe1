package minh.leetcodesync;

import java.io.*;
import java.net.URISyntaxException;
import java.util.*;
import java.util.concurrent.TimeUnit;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import org.eclipse.jgit.api.AddCommand;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.TransportConfigCallback;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.InvalidRemoteException;
import org.eclipse.jgit.api.errors.TransportException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.lib.TextProgressMonitor;
import org.eclipse.jgit.transport.CredentialsProvider;
import org.eclipse.jgit.transport.JschConfigSessionFactory;
import org.eclipse.jgit.transport.OpenSshConfig.Host;
import org.eclipse.jgit.transport.SshSessionFactory;
import org.eclipse.jgit.transport.SshTransport;
import org.eclipse.jgit.transport.Transport;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.json.*;

import com.jcraft.jsch.Session;

import DAO.SubmissionDAOImp;
import controller.GitController;
import io.github.cdimascio.dotenv.Dotenv;

/**
 * Hello world!
 *
 */
public class App {
	public static void main(String[] args)
			throws InvalidRemoteException, TransportException, GitAPIException, IOException {
		System.out.println("Hello World!");
//		SubmissionDAOImp s = SubmissionDAOImp.getInstance();
//		s.downloadAllSubmission(10);
		connectGit();
	}

	public static void connectGit() throws InvalidRemoteException, TransportException, GitAPIException, IOException {
		File f = new File("./github");
		if (f.exists()) {
			deleteDir(f);
		}
		TextProgressMonitor consoleProgressMonitor = new TextProgressMonitor(new PrintWriter(System.out));
		SshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {

			@Override
			protected void configure(Host hc, Session session) {
				// TODO Auto-generated method stub
				
			}

		};
		CredentialsProvider c = new UsernamePasswordCredentialsProvider("CuHuyHoangMinh","dragonMINH1998");

		Git git = Git.cloneRepository().setProgressMonitor(consoleProgressMonitor).setDirectory(f)
				.setURI("https://github.com/CuHuyHoangMinh/leetcodePractice.git")
				.setCredentialsProvider(c)
				.call();
		Repository repo = git.getRepository();
		FileWriter test = new FileWriter("./github/test.txt");
		test.write("something");
		test.close();
		AddCommand add = git.add();

		add.addFilepattern("/github/test.txt").call();
		git.commit().setMessage("test git").call();
		git.push().setCredentialsProvider(c).call();

	}

	public static boolean deleteDir(File f) {
		File[] allFiles = f.listFiles();
		if (allFiles != null) {
			for (File fi : allFiles) {
				deleteDir(fi);
			}
		}
		return f.delete();
	}

}
